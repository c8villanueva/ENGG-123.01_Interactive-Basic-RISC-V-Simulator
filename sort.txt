44000513   # addi a0, zero, 0x400      # a0 = 0x440 (array base address)
05000593   # addi a1, zero, 80         # a1 = 80 (offset to element 10)
00B50533   # add  a0, a0, a1           # a0 = base + 80 (start of middle 10)
00A00793   # addi a5, zero, 10         # a5 = 10 (N = 10, outer counter)
00000593   # addi a1, zero, 0          # a1 = 0 (inner = 0, reset inner counter)
00359693   # slli a3, a1, 3            # a3 = inner * 8 (calculate offset)
00D506B3   # add  a3, a0, a3           # a3 = base + offset (address of arr[inner])
0006B703   # ld   a4, 0(a3)            # a4 = arr[inner] (load current element)
0086B803   # ld   a6, 8(a3)            # a6 = arr[inner+1] (load next element)
01074263   # blt  a4, a6, skip_swap    # if a4 < a6, skip swap (+20 bytes = 0x14)
0106B423   # sd   a6, 8(a3)            # arr[inner+1] = a6 (store larger at next)
00E6B023   # sd   a4, 0(a3)            # arr[inner] = a4 (store smaller at current)
00158593   # addi a1, a1, 1            # inner++ (increment inner counter)
FFF78713   # addi a4, a5, -1           # a4 = N - 1 (calculate inner loop limit)
FCE59EE3   # bne  a1, a4, inner_loop   # if inner != N-1, jump to 0x14 (-28 bytes)
FFF78793   # addi a5, a5, -1           # N-- (decrement outer counter)
FC0796E3   # bne  a5, zero, outer_loop # if N != 0, jump to 0x10 (-48 bytes)